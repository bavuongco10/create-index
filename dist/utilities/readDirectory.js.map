{"version":3,"sources":["../../src/utilities/readDirectory.js"],"names":["hasNoExtension","fileName","matches","match","isSafeName","test","stripExtension","pos","lastIndexOf","substr","removeDuplicates","files","preferredExtension","_","filter","withoutExtension","mainAlternative","includes","removeIgnoredFiles","ignorePatterns","length","patterns","map","pattern","startsWith","endsWith","patternWithoutSlashes","slice","RegExp","directoryPath","options","silent","extensions","config","ignoreDirectories","children","fs","readdirSync","absolutePath","path","resolve","isDirectory","statSync","some","ext","ignore","sort"],"mappings":"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","file":"readDirectory.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport hasIndex from './hasIndex';\nimport validateTargetDirectory from './validateTargetDirectory';\n\nconst hasNoExtension = (fileName) => {\n  const matches = fileName.match(/\\./g);\n\n  return !matches;\n};\n\nconst isSafeName = (fileName) => {\n  return /^[a-z][a-z0-9._]+$/i.test(fileName);\n};\n\nconst stripExtension = (fileName) => {\n  const pos = fileName.lastIndexOf('.');\n\n  if (pos === -1) {\n    return fileName;\n  }\n\n  return fileName.substr(0, pos);\n};\n\nconst removeDuplicates = (files, preferredExtension) => {\n  return _.filter(files, (fileName) => {\n    const withoutExtension = stripExtension(fileName);\n    const mainAlternative = withoutExtension + '.' + preferredExtension;\n\n    if (mainAlternative === fileName) {\n      return true;\n    }\n\n    return !_.includes(files, mainAlternative);\n  });\n};\n\nconst removeIgnoredFiles = (files, ignorePatterns = []) => {\n  if (ignorePatterns.length === 0) {\n    return files;\n  }\n\n  const patterns = ignorePatterns.map((pattern) => {\n    if (_.startsWith(pattern, '/') && _.endsWith(pattern, '/')) {\n      const patternWithoutSlashes = pattern.slice(1, -1);\n\n      return new RegExp(patternWithoutSlashes);\n    }\n\n    return new RegExp(pattern);\n  });\n\n  return _.filter(files, (fileName) => {\n    let pattern;\n\n    for (pattern of patterns) {\n      if (fileName.match(pattern) !== null) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n};\n\nexport default (directoryPath, options = {}) => {\n  if (!validateTargetDirectory(directoryPath, {silent: options.silent})) {\n    return false;\n  }\n\n  const {\n    extensions = ['js'],\n    config = {},\n    ignoreDirectories = false\n  } = options;\n\n  let children;\n\n  children = fs.readdirSync(directoryPath);\n\n  children = _.filter(children, (fileName) => {\n    const absolutePath = path.resolve(directoryPath, fileName);\n    const isDirectory = fs.statSync(absolutePath).isDirectory();\n\n    if (!isSafeName(fileName)) {\n      return false;\n    }\n\n    if (hasNoExtension(fileName) && !isDirectory) {\n      return false;\n    }\n\n    if (_.startsWith(fileName, 'index.js')) {\n      return false;\n    }\n\n    if (!isDirectory && !extensions.some((ext) => {\n      return _.endsWith(fileName, '.' + ext);\n    })) {\n      return false;\n    }\n\n    if (isDirectory && (!hasIndex(absolutePath) || ignoreDirectories)) {\n      return false;\n    }\n\n    return true;\n  });\n\n  children = removeDuplicates(children, extensions[0]);\n  children = removeIgnoredFiles(children, config.ignore);\n\n  return children.sort();\n};\n"]}